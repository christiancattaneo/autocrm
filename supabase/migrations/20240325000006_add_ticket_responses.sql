-- Create an enum for response types if it doesn't exist
DO $$ BEGIN
    CREATE TYPE response_type AS ENUM ('ai_generated', 'manual', 'system');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create the ticket_responses table
CREATE TABLE IF NOT EXISTS ticket_responses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ticket_id BIGINT REFERENCES tickets(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    author_id UUID REFERENCES auth.users(id),
    author_email TEXT NOT NULL,
    response_type response_type NOT NULL DEFAULT 'manual',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_ticket_responses_ticket_id ON ticket_responses(ticket_id);
CREATE INDEX IF NOT EXISTS idx_ticket_responses_author_id ON ticket_responses(author_id);
CREATE INDEX IF NOT EXISTS idx_ticket_responses_created_at ON ticket_responses(created_at);

-- Enable RLS
ALTER TABLE ticket_responses ENABLE ROW LEVEL SECURITY;

-- Add policies for ticket_responses
DO $$ BEGIN
    CREATE POLICY "Users can view responses to their tickets"
        ON ticket_responses FOR SELECT
        USING (
            EXISTS (
                SELECT 1 FROM tickets
                WHERE tickets.id = ticket_responses.ticket_id
                AND (
                    tickets.customer_email = auth.email()
                    OR EXISTS (
                        SELECT 1 FROM user_roles
                        WHERE user_roles.user_id = auth.uid()
                        AND role IN ('staff', 'admin')
                    )
                )
            )
        );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE POLICY "Users can create responses to their tickets"
        ON ticket_responses FOR INSERT
        WITH CHECK (
            EXISTS (
                SELECT 1 FROM tickets
                WHERE tickets.id = ticket_responses.ticket_id
                AND (
                    tickets.customer_email = auth.email()
                    OR EXISTS (
                        SELECT 1 FROM user_roles
                        WHERE user_roles.user_id = auth.uid()
                        AND role IN ('staff', 'admin')
                    )
                )
            )
        );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Add trigger to update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

DO $$ BEGIN
    CREATE TRIGGER update_ticket_responses_updated_at
        BEFORE UPDATE ON ticket_responses
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Backfill existing ticket descriptions as responses
INSERT INTO ticket_responses (ticket_id, content, author_id, author_email, response_type, created_at, updated_at)
SELECT 
    id as ticket_id,
    description as content,
    (SELECT user_id FROM user_roles WHERE role = 'admin' LIMIT 1) as author_id,
    customer_email as author_email,
    'manual' as response_type,
    created_at,
    updated_at
FROM tickets
WHERE description IS NOT NULL AND description != ''
ON CONFLICT DO NOTHING; 