-- Create the response_evaluations table
CREATE TABLE IF NOT EXISTS response_evaluations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    response_id BIGINT REFERENCES ticket_responses(id) ON DELETE CASCADE,
    relevance DECIMAL(3,2) NOT NULL CHECK (relevance >= 0 AND relevance <= 1),
    accuracy DECIMAL(3,2) NOT NULL CHECK (accuracy >= 0 AND accuracy <= 1),
    completeness DECIMAL(3,2) NOT NULL CHECK (completeness >= 0 AND completeness <= 1),
    actionability DECIMAL(3,2) NOT NULL CHECK (actionability >= 0 AND actionability <= 1),
    tone DECIMAL(3,2) NOT NULL CHECK (tone >= 0 AND tone <= 1),
    feedback TEXT,
    evaluated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_response_evaluations_response_id ON response_evaluations(response_id);
CREATE INDEX IF NOT EXISTS idx_response_evaluations_evaluated_at ON response_evaluations(evaluated_at);

-- Enable RLS
ALTER TABLE response_evaluations ENABLE ROW LEVEL SECURITY;

-- Add policies for response_evaluations
DO $$ BEGIN
    CREATE POLICY "Staff and admins can view all evaluations"
        ON response_evaluations FOR SELECT
        USING (
            EXISTS (
                SELECT 1 FROM user_roles
                WHERE user_roles.user_id = auth.uid()
                AND role IN ('staff', 'admin')
            )
        );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE POLICY "Staff and admins can create evaluations"
        ON response_evaluations FOR INSERT
        WITH CHECK (
            EXISTS (
                SELECT 1 FROM user_roles
                WHERE user_roles.user_id = auth.uid()
                AND role IN ('staff', 'admin')
            )
        );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create views for analytics
CREATE OR REPLACE VIEW response_metrics AS
SELECT
    DATE_TRUNC('day', evaluated_at) as day,
    COUNT(*) as total_responses,
    AVG(relevance) as avg_relevance,
    AVG(accuracy) as avg_accuracy,
    AVG(completeness) as avg_completeness,
    AVG(actionability) as avg_actionability,
    AVG(tone) as avg_tone
FROM response_evaluations
GROUP BY DATE_TRUNC('day', evaluated_at); 